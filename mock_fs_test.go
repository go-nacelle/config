// Code generated by go-mockgen 0.1.0; DO NOT EDIT.

package config

import "sync"

// MockFileSystem is a mock implementation of the FileSystem interface (from
// the package github.com/go-nacelle/config) used for unit testing.
type MockFileSystem struct {
	// ExistsFunc is an instance of a mock function object controlling the
	// behavior of the method Exists.
	ExistsFunc *FileSystemExistsFunc
	// GlobFunc is an instance of a mock function object controlling the
	// behavior of the method Glob.
	GlobFunc *FileSystemGlobFunc
	// ListFilesFunc is an instance of a mock function object controlling
	// the behavior of the method ListFiles.
	ListFilesFunc *FileSystemListFilesFunc
	// ReadFileFunc is an instance of a mock function object controlling the
	// behavior of the method ReadFile.
	ReadFileFunc *FileSystemReadFileFunc
}

// NewMockFileSystem creates a new mock of the FileSystem interface. All
// methods return zero values for all results, unless overwritten.
func NewMockFileSystem() *MockFileSystem {
	return &MockFileSystem{
		ExistsFunc: &FileSystemExistsFunc{
			defaultHook: func(string) (bool, error) {
				return false, nil
			},
		},
		GlobFunc: &FileSystemGlobFunc{
			defaultHook: func(string) ([]string, error) {
				return nil, nil
			},
		},
		ListFilesFunc: &FileSystemListFilesFunc{
			defaultHook: func(string) ([]string, error) {
				return nil, nil
			},
		},
		ReadFileFunc: &FileSystemReadFileFunc{
			defaultHook: func(string) ([]byte, error) {
				return nil, nil
			},
		},
	}
}

// NewMockFileSystemFrom creates a new mock of the MockFileSystem interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockFileSystemFrom(i FileSystem) *MockFileSystem {
	return &MockFileSystem{
		ExistsFunc: &FileSystemExistsFunc{
			defaultHook: i.Exists,
		},
		GlobFunc: &FileSystemGlobFunc{
			defaultHook: i.Glob,
		},
		ListFilesFunc: &FileSystemListFilesFunc{
			defaultHook: i.ListFiles,
		},
		ReadFileFunc: &FileSystemReadFileFunc{
			defaultHook: i.ReadFile,
		},
	}
}

// FileSystemExistsFunc describes the behavior when the Exists method of the
// parent MockFileSystem instance is invoked.
type FileSystemExistsFunc struct {
	defaultHook func(string) (bool, error)
	hooks       []func(string) (bool, error)
	history     []FileSystemExistsFuncCall
	mutex       sync.Mutex
}

// Exists delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockFileSystem) Exists(v0 string) (bool, error) {
	r0, r1 := m.ExistsFunc.nextHook()(v0)
	m.ExistsFunc.appendCall(FileSystemExistsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Exists method of the
// parent MockFileSystem instance is invoked and the hook queue is empty.
func (f *FileSystemExistsFunc) SetDefaultHook(hook func(string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Exists method of the parent MockFileSystem instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *FileSystemExistsFunc) PushHook(hook func(string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *FileSystemExistsFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *FileSystemExistsFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(string) (bool, error) {
		return r0, r1
	})
}

func (f *FileSystemExistsFunc) nextHook() func(string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FileSystemExistsFunc) appendCall(r0 FileSystemExistsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FileSystemExistsFuncCall objects describing
// the invocations of this function.
func (f *FileSystemExistsFunc) History() []FileSystemExistsFuncCall {
	f.mutex.Lock()
	history := make([]FileSystemExistsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FileSystemExistsFuncCall is an object that describes an invocation of
// method Exists on an instance of MockFileSystem.
type FileSystemExistsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FileSystemExistsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FileSystemExistsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FileSystemGlobFunc describes the behavior when the Glob method of the
// parent MockFileSystem instance is invoked.
type FileSystemGlobFunc struct {
	defaultHook func(string) ([]string, error)
	hooks       []func(string) ([]string, error)
	history     []FileSystemGlobFuncCall
	mutex       sync.Mutex
}

// Glob delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockFileSystem) Glob(v0 string) ([]string, error) {
	r0, r1 := m.GlobFunc.nextHook()(v0)
	m.GlobFunc.appendCall(FileSystemGlobFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Glob method of the
// parent MockFileSystem instance is invoked and the hook queue is empty.
func (f *FileSystemGlobFunc) SetDefaultHook(hook func(string) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Glob method of the parent MockFileSystem instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *FileSystemGlobFunc) PushHook(hook func(string) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *FileSystemGlobFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(string) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *FileSystemGlobFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(string) ([]string, error) {
		return r0, r1
	})
}

func (f *FileSystemGlobFunc) nextHook() func(string) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FileSystemGlobFunc) appendCall(r0 FileSystemGlobFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FileSystemGlobFuncCall objects describing
// the invocations of this function.
func (f *FileSystemGlobFunc) History() []FileSystemGlobFuncCall {
	f.mutex.Lock()
	history := make([]FileSystemGlobFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FileSystemGlobFuncCall is an object that describes an invocation of
// method Glob on an instance of MockFileSystem.
type FileSystemGlobFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FileSystemGlobFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FileSystemGlobFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FileSystemListFilesFunc describes the behavior when the ListFiles method
// of the parent MockFileSystem instance is invoked.
type FileSystemListFilesFunc struct {
	defaultHook func(string) ([]string, error)
	hooks       []func(string) ([]string, error)
	history     []FileSystemListFilesFuncCall
	mutex       sync.Mutex
}

// ListFiles delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockFileSystem) ListFiles(v0 string) ([]string, error) {
	r0, r1 := m.ListFilesFunc.nextHook()(v0)
	m.ListFilesFunc.appendCall(FileSystemListFilesFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListFiles method of
// the parent MockFileSystem instance is invoked and the hook queue is
// empty.
func (f *FileSystemListFilesFunc) SetDefaultHook(hook func(string) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListFiles method of the parent MockFileSystem instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *FileSystemListFilesFunc) PushHook(hook func(string) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *FileSystemListFilesFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(string) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *FileSystemListFilesFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(string) ([]string, error) {
		return r0, r1
	})
}

func (f *FileSystemListFilesFunc) nextHook() func(string) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FileSystemListFilesFunc) appendCall(r0 FileSystemListFilesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FileSystemListFilesFuncCall objects
// describing the invocations of this function.
func (f *FileSystemListFilesFunc) History() []FileSystemListFilesFuncCall {
	f.mutex.Lock()
	history := make([]FileSystemListFilesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FileSystemListFilesFuncCall is an object that describes an invocation of
// method ListFiles on an instance of MockFileSystem.
type FileSystemListFilesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FileSystemListFilesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FileSystemListFilesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FileSystemReadFileFunc describes the behavior when the ReadFile method of
// the parent MockFileSystem instance is invoked.
type FileSystemReadFileFunc struct {
	defaultHook func(string) ([]byte, error)
	hooks       []func(string) ([]byte, error)
	history     []FileSystemReadFileFuncCall
	mutex       sync.Mutex
}

// ReadFile delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockFileSystem) ReadFile(v0 string) ([]byte, error) {
	r0, r1 := m.ReadFileFunc.nextHook()(v0)
	m.ReadFileFunc.appendCall(FileSystemReadFileFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ReadFile method of
// the parent MockFileSystem instance is invoked and the hook queue is
// empty.
func (f *FileSystemReadFileFunc) SetDefaultHook(hook func(string) ([]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReadFile method of the parent MockFileSystem instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *FileSystemReadFileFunc) PushHook(hook func(string) ([]byte, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *FileSystemReadFileFunc) SetDefaultReturn(r0 []byte, r1 error) {
	f.SetDefaultHook(func(string) ([]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *FileSystemReadFileFunc) PushReturn(r0 []byte, r1 error) {
	f.PushHook(func(string) ([]byte, error) {
		return r0, r1
	})
}

func (f *FileSystemReadFileFunc) nextHook() func(string) ([]byte, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FileSystemReadFileFunc) appendCall(r0 FileSystemReadFileFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FileSystemReadFileFuncCall objects
// describing the invocations of this function.
func (f *FileSystemReadFileFunc) History() []FileSystemReadFileFuncCall {
	f.mutex.Lock()
	history := make([]FileSystemReadFileFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FileSystemReadFileFuncCall is an object that describes an invocation of
// method ReadFile on an instance of MockFileSystem.
type FileSystemReadFileFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FileSystemReadFileFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FileSystemReadFileFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
